import { Context as TelegrafContext, MiddlewareFn } from 'telegraf';
import { Message } from 'typegram';
import { ReplyToMessageContext } from './identifier';
declare type ConstOrPromise<T> = T | Promise<T>;
export default class TelegrafStatelessQuestion<Context extends TelegrafContext> {
    readonly uniqueIdentifier: string;
    private readonly answer;
    constructor(uniqueIdentifier: string, answer: (context: ReplyToMessageContext<Context>, additionalState: string) => ConstOrPromise<void>);
    middleware(): MiddlewareFn<Context>;
    messageSuffixHTML(additionalState?: string): string;
    messageSuffixMarkdown(additionalState?: string): string;
    messageSuffixMarkdownV2(additionalState?: string): string;
    replyWithHTML(context: TelegrafContext, text: string, additionalState?: string): Promise<Message>;
    replyWithMarkdown(context: TelegrafContext, text: string, additionalState?: string): Promise<Message>;
    replyWithMarkdownV2(context: TelegrafContext, text: string, additionalState?: string): Promise<Message>;
}
export {};
