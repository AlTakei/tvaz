"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const identifier_1 = require("./identifier");
class TelegrafStatelessQuestion {
    constructor(uniqueIdentifier, answer) {
        Object.defineProperty(this, "uniqueIdentifier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: uniqueIdentifier
        });
        Object.defineProperty(this, "answer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: answer
        });
    }
    middleware() {
        return async (context, next) => {
            if (identifier_1.isContextReplyToMessage(context) && identifier_1.isReplyToQuestion(context, this.uniqueIdentifier)) {
                const additionalState = identifier_1.getAdditionalState(context, this.uniqueIdentifier);
                return this.answer(context, additionalState);
            }
            await next();
        };
    }
    messageSuffixHTML(additionalState) {
        return identifier_1.suffixHTML(this.uniqueIdentifier, additionalState);
    }
    messageSuffixMarkdown(additionalState) {
        return identifier_1.suffixMarkdown(this.uniqueIdentifier, additionalState);
    }
    messageSuffixMarkdownV2(additionalState) {
        return identifier_1.suffixMarkdownV2(this.uniqueIdentifier, additionalState);
    }
    async replyWithHTML(context, text, additionalState) {
        const textResult = text + this.messageSuffixHTML(additionalState);
        return context.reply(textResult, { reply_markup: { force_reply: true }, parse_mode: 'HTML' });
    }
    async replyWithMarkdown(context, text, additionalState) {
        const textResult = text + this.messageSuffixMarkdown(additionalState);
        return context.reply(textResult, { reply_markup: { force_reply: true }, parse_mode: 'Markdown' });
    }
    async replyWithMarkdownV2(context, text, additionalState) {
        const textResult = text + this.messageSuffixMarkdownV2(additionalState);
        return context.reply(textResult, { reply_markup: { force_reply: true }, parse_mode: 'MarkdownV2' });
    }
}
exports.default = TelegrafStatelessQuestion;
// For CommonJS default export support
module.exports = TelegrafStatelessQuestion;
module.exports.default = TelegrafStatelessQuestion;
